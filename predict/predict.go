// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package predict

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - User
//  - RegTime
//  - StartTime
//  - EndTime
//  - Count
//  - ReqID
//  - Ids
//  - AbtestParameters
//  - DebugEnable
//  - AbID
//  - JSONContextInfo
//  - JSONUserInfo
//  - JSONContentInfo
//  - JSONAuthorInfo
//  - Info
type Req struct {
  User string `thrift:"user,1" db:"user" json:"user"`
  RegTime int32 `thrift:"reg_time,2" db:"reg_time" json:"reg_time"`
  StartTime int32 `thrift:"start_time,3" db:"start_time" json:"start_time"`
  EndTime int32 `thrift:"end_time,4" db:"end_time" json:"end_time"`
  Count int32 `thrift:"count,5" db:"count" json:"count"`
  ReqID string `thrift:"req_id,6" db:"req_id" json:"req_id"`
  Ids []int64 `thrift:"ids,7" db:"ids" json:"ids"`
  AbtestParameters string `thrift:"abtest_parameters,8" db:"abtest_parameters" json:"abtest_parameters"`
  DebugEnable bool `thrift:"debug_enable,9" db:"debug_enable" json:"debug_enable"`
  AbID string `thrift:"ab_id,10" db:"ab_id" json:"ab_id"`
  JSONContextInfo *string `thrift:"json_context_info,11" db:"json_context_info" json:"json_context_info,omitempty"`
  JSONUserInfo *string `thrift:"json_user_info,12" db:"json_user_info" json:"json_user_info,omitempty"`
  JSONContentInfo []string `thrift:"json_content_info,13" db:"json_content_info" json:"json_content_info,omitempty"`
  JSONAuthorInfo []string `thrift:"json_author_info,14" db:"json_author_info" json:"json_author_info,omitempty"`
  Info *map[string]string `thrift:"info,15" db:"info" json:"info"`
}

func NewReq() *Req {
  return &Req{
Count: 50,
}
}


func (p *Req) GetUser() string {
  return p.User
}

func (p *Req) GetRegTime() int32 {
  return p.RegTime
}

func (p *Req) GetStartTime() int32 {
  return p.StartTime
}

func (p *Req) GetEndTime() int32 {
  return p.EndTime
}

func (p *Req) GetCount() int32 {
  return p.Count
}

func (p *Req) GetReqID() string {
  return p.ReqID
}

func (p *Req) GetIds() []int64 {
  return p.Ids
}

func (p *Req) GetAbtestParameters() string {
  return p.AbtestParameters
}

func (p *Req) GetDebugEnable() bool {
  return p.DebugEnable
}

func (p *Req) GetAbID() string {
  return p.AbID
}
var Req_JSONContextInfo_DEFAULT string
func (p *Req) GetJSONContextInfo() string {
  if !p.IsSetJSONContextInfo() {
    return Req_JSONContextInfo_DEFAULT
  }
return *p.JSONContextInfo
}
var Req_JSONUserInfo_DEFAULT string
func (p *Req) GetJSONUserInfo() string {
  if !p.IsSetJSONUserInfo() {
    return Req_JSONUserInfo_DEFAULT
  }
return *p.JSONUserInfo
}
var Req_JSONContentInfo_DEFAULT []string

func (p *Req) GetJSONContentInfo() []string {
  return p.JSONContentInfo
}
var Req_JSONAuthorInfo_DEFAULT []string

func (p *Req) GetJSONAuthorInfo() []string {
  return p.JSONAuthorInfo
}
var Req_Info_DEFAULT map[string]string = map[string]string{
}
func (p *Req) GetInfo() map[string]string {
  if !p.IsSetInfo() {
    return Req_Info_DEFAULT
  }
return *p.Info
}
func (p *Req) IsSetJSONContextInfo() bool {
  return p.JSONContextInfo != nil
}

func (p *Req) IsSetJSONUserInfo() bool {
  return p.JSONUserInfo != nil
}

func (p *Req) IsSetJSONContentInfo() bool {
  return p.JSONContentInfo != nil
}

func (p *Req) IsSetJSONAuthorInfo() bool {
  return p.JSONAuthorInfo != nil
}

func (p *Req) IsSetInfo() bool {
  return p.Info != nil
}

func (p *Req) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField15(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Req)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.User = v
}
  return nil
}

func (p *Req)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RegTime = v
}
  return nil
}

func (p *Req)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *Req)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.EndTime = v
}
  return nil
}

func (p *Req)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Count = v
}
  return nil
}

func (p *Req)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReqID = v
}
  return nil
}

func (p *Req)  ReadField7(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int64, 0, size)
  p.Ids =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 int64
    if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Ids = append(p.Ids, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Req)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AbtestParameters = v
}
  return nil
}

func (p *Req)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.DebugEnable = v
}
  return nil
}

func (p *Req)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AbID = v
}
  return nil
}

func (p *Req)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.JSONContextInfo = &v
}
  return nil
}

func (p *Req)  ReadField12(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.JSONUserInfo = &v
}
  return nil
}

func (p *Req)  ReadField13(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.JSONContentInfo =  tSlice
  for i := 0; i < size; i ++ {
var _elem1 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem1 = v
}
    p.JSONContentInfo = append(p.JSONContentInfo, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Req)  ReadField14(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.JSONAuthorInfo =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.JSONAuthorInfo = append(p.JSONAuthorInfo, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Req)  ReadField15(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Info =  &tMap
  for i := 0; i < size; i ++ {
var _key3 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    (*p.Info)[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *Req) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Req"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
    if err := p.writeField13(oprot); err != nil { return err }
    if err := p.writeField14(oprot); err != nil { return err }
    if err := p.writeField15(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Req) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("user", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:user: ", p), err) }
  if err := oprot.WriteString(string(p.User)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.user (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:user: ", p), err) }
  return err
}

func (p *Req) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("reg_time", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:reg_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.RegTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.reg_time (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:reg_time: ", p), err) }
  return err
}

func (p *Req) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("start_time", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:start_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_time (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:start_time: ", p), err) }
  return err
}

func (p *Req) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("end_time", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:end_time: ", p), err) }
  if err := oprot.WriteI32(int32(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.end_time (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:end_time: ", p), err) }
  return err
}

func (p *Req) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("count", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:count: ", p), err) }
  if err := oprot.WriteI32(int32(p.Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.count (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:count: ", p), err) }
  return err
}

func (p *Req) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req_id", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:req_id: ", p), err) }
  if err := oprot.WriteString(string(p.ReqID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.req_id (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:req_id: ", p), err) }
  return err
}

func (p *Req) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ids", thrift.LIST, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ids: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I64, len(p.Ids)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Ids {
    if err := oprot.WriteI64(int64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ids: ", p), err) }
  return err
}

func (p *Req) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("abtest_parameters", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:abtest_parameters: ", p), err) }
  if err := oprot.WriteString(string(p.AbtestParameters)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.abtest_parameters (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:abtest_parameters: ", p), err) }
  return err
}

func (p *Req) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("debug_enable", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:debug_enable: ", p), err) }
  if err := oprot.WriteBool(bool(p.DebugEnable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.debug_enable (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:debug_enable: ", p), err) }
  return err
}

func (p *Req) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ab_id", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:ab_id: ", p), err) }
  if err := oprot.WriteString(string(p.AbID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ab_id (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:ab_id: ", p), err) }
  return err
}

func (p *Req) writeField11(oprot thrift.TProtocol) (err error) {
  if p.IsSetJSONContextInfo() {
    if err := oprot.WriteFieldBegin("json_context_info", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:json_context_info: ", p), err) }
    if err := oprot.WriteString(string(*p.JSONContextInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.json_context_info (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:json_context_info: ", p), err) }
  }
  return err
}

func (p *Req) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetJSONUserInfo() {
    if err := oprot.WriteFieldBegin("json_user_info", thrift.STRING, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:json_user_info: ", p), err) }
    if err := oprot.WriteString(string(*p.JSONUserInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.json_user_info (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:json_user_info: ", p), err) }
  }
  return err
}

func (p *Req) writeField13(oprot thrift.TProtocol) (err error) {
  if p.IsSetJSONContentInfo() {
    if err := oprot.WriteFieldBegin("json_content_info", thrift.LIST, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:json_content_info: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.JSONContentInfo)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JSONContentInfo {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:json_content_info: ", p), err) }
  }
  return err
}

func (p *Req) writeField14(oprot thrift.TProtocol) (err error) {
  if p.IsSetJSONAuthorInfo() {
    if err := oprot.WriteFieldBegin("json_author_info", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:json_author_info: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.JSONAuthorInfo)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.JSONAuthorInfo {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:json_author_info: ", p), err) }
  }
  return err
}

func (p *Req) writeField15(oprot thrift.TProtocol) (err error) {
  if p.IsSetInfo() {
    if err := oprot.WriteFieldBegin("info", thrift.MAP, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:info: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(*p.Info)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range *p.Info {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:info: ", p), err) }
  }
  return err
}

func (p *Req) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Req(%+v)", *p)
}

// Attributes:
//  - ID
//  - Score
type SortContent struct {
  // unused field # 1
  ID int64 `thrift:"id,2" db:"id" json:"id"`
  Score float64 `thrift:"score,3" db:"score" json:"score"`
}

func NewSortContent() *SortContent {
  return &SortContent{}
}


func (p *SortContent) GetID() int64 {
  return p.ID
}

func (p *SortContent) GetScore() float64 {
  return p.Score
}
func (p *SortContent) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SortContent)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *SortContent)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Score = v
}
  return nil
}

func (p *SortContent) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SortContent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SortContent) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *SortContent) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("score", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:score: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Score)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.score (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:score: ", p), err) }
  return err
}

func (p *SortContent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SortContent(%+v)", *p)
}

// Attributes:
//  - Contents
//  - Status
//  - Features
type Rsp struct {
  Contents []*SortContent `thrift:"contents,1" db:"contents" json:"contents"`
  Status string `thrift:"status,2" db:"status" json:"status"`
  Features *[]string `thrift:"features,3" db:"features" json:"features"`
}

func NewRsp() *Rsp {
  return &Rsp{}
}


func (p *Rsp) GetContents() []*SortContent {
  return p.Contents
}

func (p *Rsp) GetStatus() string {
  return p.Status
}
var Rsp_Features_DEFAULT []string = []string{
}
func (p *Rsp) GetFeatures() []string {
  if !p.IsSetFeatures() {
    return Rsp_Features_DEFAULT
  }
return *p.Features
}
func (p *Rsp) IsSetFeatures() bool {
  return p.Features != nil
}

func (p *Rsp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Rsp)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SortContent, 0, size)
  p.Contents =  tSlice
  for i := 0; i < size; i ++ {
    _elem5 := &SortContent{}
    if err := _elem5.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
    }
    p.Contents = append(p.Contents, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Rsp)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *Rsp)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Features =  &tSlice
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    (*p.Features) = append((*p.Features), _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Rsp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Rsp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Rsp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contents", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:contents: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Contents)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contents {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:contents: ", p), err) }
  return err
}

func (p *Rsp) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteString(string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *Rsp) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetFeatures() {
    if err := oprot.WriteFieldBegin("features", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:features: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(*p.Features)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range *p.Features {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:features: ", p), err) }
  }
  return err
}

func (p *Rsp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Rsp(%+v)", *p)
}

type Predict interface {
  // Parameters:
  //  - Req
  Predict(ctx context.Context, req *Req) (r *Rsp, err error)
  // Parameters:
  //  - Req
  DropPredict(ctx context.Context, req *Req) (err error)
}

type PredictClient struct {
  c thrift.TClient
}

func NewPredictClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PredictClient {
  return &PredictClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewPredictClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PredictClient {
  return &PredictClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewPredictClient(c thrift.TClient) *PredictClient {
  return &PredictClient{
    c: c,
  }
}

func (p *PredictClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Req
func (p *PredictClient) Predict(ctx context.Context, req *Req) (r *Rsp, err error) {
  var _args7 PredictPredictArgs
  _args7.Req = req
  var _result8 PredictPredictResult
  if err = p.Client_().Call(ctx, "predict", &_args7, &_result8); err != nil {
    return
  }
  return _result8.GetSuccess(), nil
}

// Parameters:
//  - Req
func (p *PredictClient) DropPredict(ctx context.Context, req *Req) (err error) {
  var _args9 PredictDropPredictArgs
  _args9.Req = req
  if err := p.Client_().Call(ctx, "drop_predict", &_args9, nil); err != nil {
    return err
  }
  return nil
}

type PredictProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler Predict
}

func (p *PredictProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PredictProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PredictProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPredictProcessor(handler Predict) *PredictProcessor {

  self10 := &PredictProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["predict"] = &predictProcessorPredict{handler:handler}
  self10.processorMap["drop_predict"] = &predictProcessorDropPredict{handler:handler}
return self10
}

func (p *PredictProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x11.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x11

}

type predictProcessorPredict struct {
  handler Predict
}

func (p *predictProcessorPredict) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PredictPredictArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("predict", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PredictPredictResult{}
var retval *Rsp
  var err2 error
  if retval, err2 = p.handler.Predict(ctx, args.Req); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing predict: " + err2.Error())
    oprot.WriteMessageBegin("predict", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("predict", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type predictProcessorDropPredict struct {
  handler Predict
}

func (p *predictProcessorDropPredict) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PredictDropPredictArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    return false, err
  }

  iprot.ReadMessageEnd()
  var err2 error
  if err2 = p.handler.DropPredict(ctx, args.Req); err2 != nil {
    return true, err2
  }
  return true, nil
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Req
type PredictPredictArgs struct {
  Req *Req `thrift:"req,1" db:"req" json:"req"`
}

func NewPredictPredictArgs() *PredictPredictArgs {
  return &PredictPredictArgs{}
}

var PredictPredictArgs_Req_DEFAULT *Req
func (p *PredictPredictArgs) GetReq() *Req {
  if !p.IsSetReq() {
    return PredictPredictArgs_Req_DEFAULT
  }
return p.Req
}
func (p *PredictPredictArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *PredictPredictArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictPredictArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &Req{
  Count: 50,
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *PredictPredictArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("predict_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *PredictPredictArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictPredictArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PredictPredictResult struct {
  Success *Rsp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPredictPredictResult() *PredictPredictResult {
  return &PredictPredictResult{}
}

var PredictPredictResult_Success_DEFAULT *Rsp
func (p *PredictPredictResult) GetSuccess() *Rsp {
  if !p.IsSetSuccess() {
    return PredictPredictResult_Success_DEFAULT
  }
return p.Success
}
func (p *PredictPredictResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PredictPredictResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictPredictResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Rsp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PredictPredictResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("predict_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictPredictResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PredictPredictResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictPredictResult(%+v)", *p)
}

// Attributes:
//  - Req
type PredictDropPredictArgs struct {
  Req *Req `thrift:"req,1" db:"req" json:"req"`
}

func NewPredictDropPredictArgs() *PredictDropPredictArgs {
  return &PredictDropPredictArgs{}
}

var PredictDropPredictArgs_Req_DEFAULT *Req
func (p *PredictDropPredictArgs) GetReq() *Req {
  if !p.IsSetReq() {
    return PredictDropPredictArgs_Req_DEFAULT
  }
return p.Req
}
func (p *PredictDropPredictArgs) IsSetReq() bool {
  return p.Req != nil
}

func (p *PredictDropPredictArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PredictDropPredictArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Req = &Req{
  Count: 50,
}
  if err := p.Req.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Req), err)
  }
  return nil
}

func (p *PredictDropPredictArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("drop_predict_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PredictDropPredictArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:req: ", p), err) }
  if err := p.Req.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Req), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:req: ", p), err) }
  return err
}

func (p *PredictDropPredictArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PredictDropPredictArgs(%+v)", *p)
}


